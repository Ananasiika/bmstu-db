-- 1. извлечь данные в JSON
SELECT row_to_json(b) result FROM sc1.branches b;
SELECT row_to_json(c) result FROM sc1.clients c;
SELECT row_to_json(c1) result FROM sc1.coaches c1;
SELECT row_to_json(v) result FROM sc1.visits v;
SELECT row_to_json(w) result FROM sc1.workouts w;


-- 2. Выполнить загрузку и сохранение JSON файла в таблицу.

-- Копия таблицы
DROP TABLE sc1.workouts_copy;

CREATE TABLE IF NOT EXISTS sc1.workouts_copy(
  id_workout int generated by default as identity 
	(start with 1 increment by 1) primary key,
  name VARCHAR(255) NOT NULL,
  id_coach INT REFERENCES sc1.coaches (id_coach),
  duration INT,
  id_branch INT REFERENCES sc1.branches (id_branch),
  rating INT NOT NULL CHECK (rating >= 1 and rating <= 10)
);

-- \copy ( SELECT row_to_json(c) RESULT FROM Sc1.workouts c ) TO '/home/larisa/db_fit/lab_05/data.json';

-- DROP TABLE workouts_import;
CREATE TABLE IF NOT EXISTS workouts_import(doc json);
-- \copy workouts_import FROM '/home/larisa/db_fit/lab_05/data.json';
-- SELECT * FROM workouts_import;

INSERT INTO sc1.workouts_copy (name, id_coach, duration, id_branch, rating)
select name, id_coach, duration, id_branch, rating
from workouts_import, json_populate_record(null::sc1.workouts_copy, doc);
	   
SELECT * FROM sc1.workouts_copy;


--3. Создать таблицу, в которой будет атрибут с типом JSON, или добавить к уже существующей таблице.
CREATE TABLE IF NOT EXISTS json_table
(
	id serial PRIMARY KEY,
	name varchar(40) NOT NULL,
	DATA json
);

insert into json_table(name, data) values 
    ('Katya', '{"age": 22, "city": "Moscow"}'::json),
    ('Sasha', '{"age": 30, "city": "Moscow"}'::json),
    ('Misha', '{"ag": 19, "city": "Saint-Petersburg"}'::json);

select * from json_table;


--4.1. Извлечь JSON фрагмент из JSON документа
CREATE TABLE IF NOT EXISTS workout_name_duration
(
	name VARCHAR(40),
	duration VARCHAR(40)
);

SELECT * FROM workouts_import, json_populate_record(NULL::workout_name_duration, doc);

SELECT doc->'name' name FROM workouts_import;

SELECT doc->'duration' duration FROM workouts_import;


--4.2. Извлечь значения конкретных узлов или атрибутов JSON документа
DROP TABLE dogs;

CREATE TABLE IF NOT EXISTS dogs 
(
    data jsonb
);

INSERT INTO dogs (data) VALUES 
('{"name": "Max", "age": 2, "breed": "Labrador", "owner": {"name": "Michael", "age": 23}}'), 
('{"name": "Bella", "age": 3, "breed": "German Shepherd", "owner": {"name": "Jacob", "age": 26}}'),
('{"name": "Charlie", "age": 1, "breed": "Golden Retriever", "owner": {"name": "Martin", "age": 17}}');

SELECT data->'owner'->'name' AS breed FROM dogs;


--4.3. Выполнить проверку существования узла или атрибута
DROP TABLE json_table1;

CREATE TABLE IF NOT EXISTS json_table1
(
	id serial PRIMARY KEY,
	name varchar(40) NOT NULL,
	data jsonb
);

insert into json_table1(name, data) values 
    ('Katya', '{"age": 22, "city": "Moscow"}'),
    ('Sasha', '{"age": 30, "city": "Moscow"}'),
    ('Misha', '{"age": 19, "city": "Saint-Petersburg"}');

select * from json_table1;

CREATE OR REPLACE FUNCTION check_attribute_exists(table_name text, column_name text, attribute_name text)
RETURNS BOOLEAN AS $$
DECLARE
    column_exists BOOLEAN;
    sql_stmt text;
BEGIN
    EXECUTE FORMAT('SELECT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name = %L AND column_name = %L)', table_name, column_name) INTO column_exists;

    IF column_exists THEN
        sql_stmt := FORMAT('SELECT EXISTS (SELECT 1 FROM %I WHERE %I::jsonb ? %L)', table_name, column_name, attribute_name);
        EXECUTE sql_stmt INTO column_exists;
        RETURN column_exists;
    ELSE
        RETURN FALSE;
    END IF;
END;
$$ LANGUAGE plpgsql;

SELECT check_attribute_exists('json_table1', 'data', 'age') AS attribute_exists;


--4.4. Изменить JSON документ
UPDATE dogs 
SET data = data || '{"age": 5}'::jsonb
WHERE (data->'age')::INT = 2;

SELECT * FROM dogs;


--4.5. Разделить JSON документ на несколько строк по узлам
DROP TABLE sc1.dogs1;

CREATE TABLE IF NOT EXISTS sc1.dogs1 
(
    doc json
);

INSERT INTO sc1.dogs1 (doc) VALUES 
('[{"name": "Max", "age": 2, "breed": "Labrador", "owner": {"name": "Michael", "age": 23}}, 
 {"name": "Bella", "age": 3, "breed": "German Shepherd", "owner": {"name": "Jacob", "age": 26}}, 
 {"name": "Charlie", "age": 1, "breed": "Golden Retriever", "owner": {"name": "Martin", "age": 17}}]');

SELECT json_array_elements(doc::json) 
FROM sc1.dogs1;
